// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model recipe {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  uri               String
  label             String
  calories          Float
  co2EmissionsClass String
  cuisineType       String
  count             Int
  images            SMALL?
  // as images links are expired after a day we will update them when we revisit those recipes
  lastUpdated       DateTime?
}

type SMALL {
  height Int
  width  Int
  url    String
}

model events {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  start       DateTime
  end         DateTime
  // id number string
  title       String
  description String
  recipes     list?
  user        user?
}

type list {
  data recipeSnapshot[]
}

type user {
  name  String
  email String
}

type recipeSnapshot {
  name   String
  imgSrc String
}

// keeping track of logged in user through prisma adapter

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Creduser {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userName String
  email String @unique
  password String
}